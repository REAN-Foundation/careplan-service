{
	"info": {
		"_postman_id": "d26880ea-c940-4a87-87bd-4b1c8fda7407",
		"name": "careplan.service.workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15905052"
	},
	"item": [
		{
			"name": "service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						},
						"description": "This request will be used by API monitor to check the health of the service."
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get user roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var roles = jsonRes.Data.RoleTypes;\r",
									"    for (var i = 0; i < roles.length; i++) {\r",
									"        var role = roles[i];\r",
									"        var roleName = role.RoleName;\r",
									"        pm.environment.set(roleName.toUpperCase() + \"_ROLE_ID\", role.id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('RoleTypes');\r",
									"    pm.expect(jsonRes.Data.RoleTypes.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get careplan categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var roles = jsonRes.Data.RoleTypes;\r",
									"    for (var i = 0; i < roles.length; i++) {\r",
									"        var role = roles[i];\r",
									"        var roleName = role.RoleName;\r",
									"        pm.environment.set(roleName.toUpperCase() + \"_ROLE_ID\", role.id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanCategories');\r",
									"    pm.expect(jsonRes.Data.CareplanCategories.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/careplan-categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"careplan-categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin login",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADMIN_PASSWORD\", \"$FG&2*(CV!X\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Default moderator login",
			"item": [
				{
					"name": "Moderator logs in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"MODERATOR_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"MODERATOR_PASSWORD\", \"X*)#43%$QWY\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"moderator\",\r\n    \"Password\": \"{{MODERATOR_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "User (Moderator) management",
			"item": [
				{
					"name": "Create / get / search / delete",
					"item": [
						{
							"name": "Create new moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"USER_ID\", jsonRes.Data.id);\r",
											"    pm.environment.set(\"USER_NAME\", jsonRes.Data.UserName);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New user record is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
											"    pm.expect(jsonRes.Data.Phone).to.not.be.null;\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
											"    pm.expect(jsonRes.Data).to.have.property('UserName');\r",
											"\r",
											"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
											"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
											"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
											"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RoleId\": \"{{MODERATOR_ROLE_ID}}\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Password\": \"Apple@1234\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get user by  id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"User record is retrived\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email')\r",
											"    pm.expect(jsonRes.Data).to.have.property('UserName')\r",
											"\r",
											"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
											"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
											"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
											"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/{{USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Api client search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ADMIN_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/users/search?gender=Male",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"search"
									],
									"query": [
										{
											"key": "firstName",
											"value": "",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "",
											"disabled": true
										},
										{
											"key": "userName",
											"value": "",
											"disabled": true
										},
										{
											"key": "countryCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "email",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "validFrom",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "validTill",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "gender",
											"value": "Male"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"User record is deleted \", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ADMIN_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/users/{{USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Moderator log in",
					"item": [
						{
							"name": "Create new moderator again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"USER_ID\", jsonRes.Data.id);\r",
											"    pm.environment.set(\"USER_NAME\", jsonRes.Data.UserName);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New user record is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
											"    pm.expect(jsonRes.Data.Phone).to.not.be.null;\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
											"    pm.expect(jsonRes.Data).to.have.property('UserName');\r",
											"\r",
											"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
											"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
											"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
											"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
											"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RoleId\": \"{{MODERATOR_ROLE_ID}}\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Password\": \"Apple@1234\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "User log-in with password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"USER_JWT\", jsonRes.Data.AccessToken);\r",
											"    pm.environment.set(\"MODERATOR_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"User login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"UserName\": \"{{USER_NAME}}\",\r\n    \"Password\": \"Apple@1234\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-password"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Update moderator profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New user profile record is updated', function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
											"    pm.expect(jsonRes.Data).to.have.property('UserName');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
											"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"\r",
											"var email = pm.environment.get(\"EMAIL\");\r",
											"email = email.replace(\"@gmail.com\", \"@inflectionzone.com\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/{{USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User logs out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"logout"
									]
								},
								"description": "Biocube admin logs in with username and password."
							},
							"response": []
						},
						{
							"name": "Generate otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"CountryCode\": \"+91\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/generate-otp",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"generate-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "User log-in with otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// try {\r",
											"//     var jsonRes = pm.response.json();\r",
											"//     pm.environment.set(\"USER_JWT\", jsonRes.Data.AccessToken);\r",
											"// }\r",
											"// catch (error) {\r",
											"//     console.log(error.message);\r",
											"// }\r",
											"\r",
											"// pm.test(\"Request is successfull\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     var jsonRes = pm.response.json();\r",
											"//     pm.expect(jsonRes.Status).to.eql('success');\r",
											"// });\r",
											"\r",
											"// pm.test(\"User login: Access token is returned\", function () {\r",
											"//     var jsonRes = pm.response.json();\r",
											"//     pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"//     pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"7309963207\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Otp\": \"490606\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-otp",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "User log-in with password again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"USER_JWT\", jsonRes.Data.AccessToken);\r",
											"    pm.environment.set(\"MODERATOR_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"User login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"UserName\": \"{{USER_NAME}}\",\r\n    \"Password\": \"Apple@1234\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-password"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Api client",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", respData.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsPrivileged).equals(true);\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"var password = \"Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client search results are returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/search?clientName=rean",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"search"
							],
							"query": [
								{
									"key": "clientName",
									"value": "rean"
								},
								{
									"key": "clientCode",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "clientInterfaceType",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "isPrivileged",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "countryCode",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "email",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validFrom",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validTill",
									"value": "xyz",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is updated', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.ClientName).equals('Rean Patient App X');\r",
									"    pm.expect(jsonRes.Data.IsPrivileged).equals(false);\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"\r",
									"var email = pm.environment.get(\"EMAIL\");\r",
									"email = email.replace(\"@gmail.com\", \"@inflectionzone.com\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"\r",
									"var today = (new Date()).toISOString().split('T')[0];\r",
									"pm.environment.set(\"TODAY\", today);\r",
									"\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"function formatDate(date) {\r",
									"    var d = new Date(date),\r",
									"        month = '' + (d.getMonth() + 1),\r",
									"        day = '' + d.getDate(),\r",
									"        year = d.getFullYear();\r",
									"\r",
									"    if (month.length < 2) \r",
									"        month = '0' + month;\r",
									"    if (day.length < 2) \r",
									"        day = '0' + day;\r",
									"\r",
									"    return [year, month, day].join('-');\r",
									"}\r",
									"\r",
									"var toDate = formatDate((new Date()).addDays(365));\r",
									"\r",
									"pm.environment.set(\"TO_DATE\", toDate);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App X\",\r\n    \"ClientInterfaceType\": \"Mobile App\",\r\n    \"IsPrivileged\": false,\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"ValidFrom\": \"{{TODAY}}\",\r\n    \"ValidTill\": \"{{TO_DATE}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(true);   \r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API client again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", respData.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"        pm.environment.set(\"API_KEY\", respData.Data.ApiKeyDetails.ApiKey);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			]
		},
		{
			"name": "Participant management",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New participant is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantReferenceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Country');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
									"    pm.expect(jsonRes.Data.ParticipantReferenceId).equals('66fce627-18fb');\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Country).equals('India');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Gender\": \"Male\",\r\n    \"ParticipantReferenceId\": \"66fce627-18fb\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Country\": \"India\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get by  id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Participant record is retrived\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantReferenceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Country');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
									"    pm.expect(jsonRes.Data.ParticipantReferenceId).equals('66fce627-18fb');\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Country).equals('India');\r",
									"});\r",
									"   \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/{{PARTICIPANT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"{{PARTICIPANT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of participants is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/search?firstName={{FIRST_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "participantReferenceId",
									"value": "66fce627-18fb",
									"disabled": true
								},
								{
									"key": "firstName",
									"value": "{{FIRST_NAME}}"
								},
								{
									"key": "lastName",
									"value": "Rai",
									"disabled": true
								},
								{
									"key": "country",
									"value": "India",
									"disabled": true
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.FirstName);\r",
									"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Phone);\r",
									"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Gender);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Participant is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Phone).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.Gender).to.not.be.empty;\r",
									"\r",
									"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Gender\": \"Male\",\r\n    \"ParticipantReferenceId\": \"66fce627-18fb\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/{{PARTICIPANT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"{{PARTICIPANT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Participant is deleted\", function () {",
									"",
									"    var expectedValue = true;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
									"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/participants/{{PARTICIPANT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"{{PARTICIPANT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New participant is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantReferenceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Country');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.FirstName).equals(pm.environment.get(\"FIRST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.LastName).equals(pm.environment.get(\"LAST_NAME\"));\r",
									"    pm.expect(jsonRes.Data.Gender).equals('Male');\r",
									"    pm.expect(jsonRes.Data.ParticipantReferenceId).equals('66fce627-18fb');\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Country).equals('India');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Gender\": \"Male\",\r\n    \"ParticipantReferenceId\": \"66fce627-18fb\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Country\": \"India\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "File resources - upload and download",
			"item": [
				{
					"name": "Upload file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"FILE_RESOURCE_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"FILE_RESOURCE_URL\", respData.Data.Url);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New file resource record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OriginalFilename');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MimeType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Public');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Size');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_JWT}}",
								"type": "text"
							},
							{
								"key": "Filename",
								"value": "2.jpg",
								"type": "text"
							},
							{
								"key": "Public",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/D:/current_projects/rean/code/careplan-service/postman/test.data/images/2.jpg"
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/download/{{FILE_RESOURCE_ID}}?disposition=attachment",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"download",
								"{{FILE_RESOURCE_ID}}"
							],
							"query": [
								{
									"key": "disposition",
									"value": "attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New file resource record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OriginalFilename');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MimeType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Public');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Size');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{FILE_RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{FILE_RESOURCE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Asset management",
			"item": [
				{
					"name": "Action plan",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ACTION_PLAN_ID\", respData.Data.id);\r",
											"    pm.environment.set(\"ACTION_PLAN_ASSET_CODE\", respData.Data.AssetCode);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New action plan record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Name).equals('Join the gym');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('ActionPlan');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Join the gym\",\r\n    \"Description\": \"Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.\",\r\n    \"Version\": \"1.0\",\r\n    \"Tags\": [\r\n        \"Exercise\",\r\n        \"Physical activity\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Action plan record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Name).equals('Join the gym');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('ActionPlan');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Action plan search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Action plan record is updated ', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('ACTIONPLAN-HF-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Join the gym');\r",
											"    pm.expect(jsonRes.Data.Description).equals('Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ACTIONPLAN-HF-2\",\r\n    \"Name\": \"Join the gym\",\r\n    \"Description\": \"Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Action plan record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);   \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New action plan record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Name).equals('Join the gym');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('ActionPlan');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Join the gym\",\r\n    \"Description\": \"Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.\",\r\n    \"Version\": \"1.0\",\r\n    \"Tags\": [\r\n        \"Exercise\",\r\n        \"Physical activity\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Animation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ANIMATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New animation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"                "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/animations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Animation record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Animation search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "transcript",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Animation record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('ANIMATION-MT-3');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ANIMATION-MT-3\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\r\n        \"Maternity\",\r\n        \"Neo-natal-care\"\r\n    ],\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Animation record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ANIMATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New animation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"                "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/animations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"APPOINTMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New appointment record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AppointmentType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Meet your doctor');\r",
											"    pm.expect(jsonRes.Data.AppointmentType).equals('Doctor');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Appointment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Meet your doctor\",\r\n    \"Description\": \".....\",\r\n    \"AppointmentType\": \"Doctor\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Appointment record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AppointmentType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Meet your doctor');\r",
											"    pm.expect(jsonRes.Data.AppointmentType).equals('Doctor');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Appointment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Appointment  search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"   \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "appointmentType",
											"value": "Lab",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New appointment record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AppointmentType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('APPOINTMENT-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AppointmentType).equals('Doctor');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Appointment');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"   \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"APPOINTMENT-CC-2\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"AppointmentType\": \"Doctor\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"APPOINTMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Appointment record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"   \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"APPOINTMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New appointment record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AppointmentType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AppointmentType).equals('Doctor');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Appointment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"AppointmentType\": \"Doctor\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Article",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ARTICLE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New article record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Summary');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Summary\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/articles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Article record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Summary');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Article  search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "summary",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Article record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Summary');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('ARTICLE-CC-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ARTICLE-CC-1\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Summary\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Article record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ARTICLE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New article record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Summary');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Summary\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/articles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Assessment",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ASSESSMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New assessment record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Template');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Name).equals('Preliminary Maternity Assessment');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Assessment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Preliminary Maternity Assessment\",\r\n    \"Description\": \"This is preliminary health assessment of the mother. Basic information is collected as a part of this questionaire.\",\r\n    \"Template\": \"Preliminary Maternity Assessment\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Assessment record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Template');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Preliminary Maternity Assessment');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Assessment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Assessment  search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "template",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Assessment record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Template');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('ASSESSMENT-HF-12');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Assessment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ASSESSMENT-HF-12\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"Template\": \"{}\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Assessment record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ASSESSMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New assessment record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Template');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Assessment');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"Template\": \"{}\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Audio",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New audio record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/audio",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Audio record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Audio search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "transcript",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Audio record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('AUDIO-CC-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"AUDIO-CC-1\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Audio record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New audio record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/audio",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Biometrics",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"BIOMETRICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New biometrics record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('BiometricsType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeasurementUnit');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Pressure');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Biometrics');\r",
											"    pm.expect(jsonRes.Data.BiometricsType).equals('Blood pressure');\r",
											"    pm.expect(jsonRes.Data.MeasurementUnit).equals('mmHg');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Blood Pressure\",\r\n    \"Description\": \".....\",\r\n    \"BiometricsType\": \"Blood pressure\",\r\n    \"MeasurementUnit\": \"mmHg\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Biometrics record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('BiometricsType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeasurementUnit');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Pressure');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Biometrics');\r",
											"    pm.expect(jsonRes.Data.BiometricsType).equals('Blood pressure');\r",
											"    pm.expect(jsonRes.Data.MeasurementUnit).equals('mmHg');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Biometrics search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "biometricsType",
											"value": "Blood pressure",
											"disabled": true
										},
										{
											"key": "measurementUnit",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Biometrics record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('BiometricsType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeasurementUnit');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('BIOMETRICS-HF-12');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Biometrics');\r",
											"    pm.expect(jsonRes.Data.BiometricsType).equals('Blood pressure');\r",
											"    pm.expect(jsonRes.Data.MeasurementUnit).equals('mmHg');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"BIOMETRICS-HF-12\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"BiometricsType\": \"Blood pressure\",\r\n    \"MeasurementUnit\": \"mmHg\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Biometrics record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"BIOMETRICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New biometrics record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('BiometricsType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeasurementUnit');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Biometrics');\r",
											"    pm.expect(jsonRes.Data.BiometricsType).equals('Blood glucose');\r",
											"    pm.expect(jsonRes.Data.MeasurementUnit).equals('mg/dL');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"BiometricsType\": \"Blood glucose\",\r\n    \"MeasurementUnit\": \"mg/dL\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Challenge",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHALLENGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New challenge record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Challenge');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Challenge record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Challenge');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Challenge record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Challenge record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('CHALLENGE-HF-12');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Challenge');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"CHALLENGE-HF-12\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\r\n        \"Maternity\",\r\n        \"Neo-natal-care\"\r\n    ],\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Challenge record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHALLENGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New challenge record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Challenge');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Checkup",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHECKUP_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New checkup record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Chest X-ray');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Checkup');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Chest X-ray\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Checkup record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Chest X-ray');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Checkup');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Checkup record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Checkup record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('CHECKUP-HF-12');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Chest X-ray');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Checkup');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"CHECKUP-HF-12\",\r\n    \"Name\": \"Chest X-ray\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Checkup record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHECKUP_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New checkup record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Chest X-ray');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Checkup');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Chest X-ray\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consultation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CONSULTATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New consultation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ConsultationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ConsultationType).equals('Tele-consultation');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Consultation');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ConsultationType\": \"Tele-consultation\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Consultation record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ConsultationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ConsultationType).equals('Tele-consultation');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Consultation');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Consultation record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "consultationType",
											"value": "Other",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Consultation record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ConsultationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('CONSULTATION-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ConsultationType).equals('Tele-consultation');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Consultation');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"CONSULTATION-CC-2\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ConsultationType\": \"Tele-consultation\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Consultation record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CONSULTATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New consultation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ConsultationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ConsultationType).equals('Tele-consultation');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Consultation');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ConsultationType\": \"Tele-consultation\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exercise",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"EXERCISE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New exercise record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ExerciseType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('IntensityLevel');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ExerciseType).equals('Aerobic');\r",
											"    pm.expect(jsonRes.Data.IntensityLevel).equals('Moderate');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ExerciseType\": \"Aerobic\",\r\n    \"IntensityLevel\": \"Moderate\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Exercise record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ExerciseType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('IntensityLevel');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ExerciseType).equals('Aerobic');\r",
											"    pm.expect(jsonRes.Data.IntensityLevel).equals('Moderate');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Exercise record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "exerciseType",
											"value": "Balance",
											"disabled": true
										},
										{
											"key": "intensityLevel",
											"value": "None",
											"disabled": true
										},
										{
											"key": "recommendedDurationMin",
											"value": "20",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Exercise record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ExerciseType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('IntensityLevel');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('EXERCISE-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ExerciseType).equals('Aerobic');\r",
											"    pm.expect(jsonRes.Data.IntensityLevel).equals('Moderate');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"EXERCISE-CC-2\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ExerciseType\": \"Aerobic\",\r\n    \"IntensityLevel\": \"Moderate\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Exercise record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"EXERCISE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New exercise record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ExerciseType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('IntensityLevel');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.ExerciseType).equals('Aerobic');\r",
											"    pm.expect(jsonRes.Data.IntensityLevel).equals('Moderate');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \".....\",\r\n    \"ExerciseType\": \"Aerobic\",\r\n    \"IntensityLevel\": \"Moderate\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Goal",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"GOAL_ID\", respData.Data.id);\r",
											"    pm.environment.set(\"GOAL_ASSET_CODE\", respData.Data.AssetCode);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New goal record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Goal');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\",\r\n    \"Tags\": [\r\n        \"Dibetic\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Goal record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Goal');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Goal record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Goal record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('GOAL-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Goal');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"GOAL-CC-2\",\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Goal record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New goal record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Goal');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Infographics",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"INFOGRAPHICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New infographics record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Infographics record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Infographics record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Infographics record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('INFOGRAPHICS-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"INFOGRAPHICS-CC-2\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Infographics record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"INFOGRAPHICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New infographics record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Medication",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDICATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New medication record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take your medication');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Medication');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Take your medication\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/medications",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Medication record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take your medication');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Medication');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Medication record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Medication record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('MEDICATION-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take your medication');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Medication');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"MEDICATION-CC-2\",\r\n    \"Name\": \"Take your medication\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Medication adherence\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Medication record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDICATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New medication record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take your medication');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Medication');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Take your medication\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/medications",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Meditation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDITATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New meditation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeditationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Mindfulness meditation');\r",
											"    pm.expect(jsonRes.Data.MeditationType).equals('Mindfulness');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Stress management');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Mindfulness meditation\",\r\n    \"Description\": \".....\",\r\n    \"MeditationType\": \"Mindfulness\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Meditation record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeditationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Mindfulness meditation');\r",
											"    pm.expect(jsonRes.Data.MeditationType).equals('Mindfulness');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Stress management');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Meditation record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "meditationType",
											"value": "Mantra",
											"disabled": true
										},
										{
											"key": "recommendedDurationMin",
											"value": "20",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Meditation record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeditationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('MEDITATION-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Mindfulness meditation');\r",
											"    pm.expect(jsonRes.Data.MeditationType).equals('Mindfulness');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Stress management');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"MEDITATION-CC-2\",\r\n    \"Name\": \"Mindfulness meditation\",\r\n    \"Description\": \".....\",\r\n    \"MeditationType\": \"Mindfulness\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Tags\": [\"Peaceful mind\", \"Bliss\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Meditation record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDITATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New meditation record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MeditationType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Mindfulness meditation');\r",
											"    pm.expect(jsonRes.Data.MeditationType).equals('Mindfulness');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Stress management');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Mindfulness meditation\",\r\n    \"Description\": \".....\",\r\n    \"MeditationType\": \"Mindfulness\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Message",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MESSAGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New message record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Category');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MessageType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Category).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.MessageType).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Scheduling at the start of the day makes execution simpler!\",\r\n    \"Description\": \"1) Write out your plan every day. 2) Plan at the same time every day. 3) Brainstorm a quick to-do list. 4) Divide your task list between Work and Life. ...\",\r\n    \"MessageType\": \"Educational\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/messages",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Message record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Category');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MessageType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Category).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.MessageType).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Message record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "category",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "messageType",
											"value": "Status",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Message record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Category');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MessageType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('MESSAGE-CC-1');\r",
											"    pm.expect(jsonRes.Data.Category).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.MessageType).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"MESSAGE-CC-1\",\r\n    \"Name\": \"Scheduling at the start of the day makes execution simpler!\",\r\n    \"Description\": \"1) Write out your plan every day. 2) Plan at the same time every day. 3) Brainstorm a quick to-do list. 4) Divide your task list between Work and Life. ...\",\r\n    \"MessageType\": \"Educational\",\r\n    \"Tags\": [\r\n        \"Maternity\",\r\n        \"Neo-natal-care\"\r\n    ],\r\n    \"Url\": \"https://www.appname.com/\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Message record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MESSAGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New message record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Category');\r",
											"    pm.expect(jsonRes.Data).to.have.property('MessageType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Category).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.MessageType).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Scheduling at the start of the day makes execution simpler!\",\r\n    \"Description\": \"1) Write out your plan every day. 2) Plan at the same time every day. 3) Brainstorm a quick to-do list. 4) Divide your task list between Work and Life. ...\",\r\n    \"MessageType\": \"Educational\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/messages",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Nutrition",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"NUTRITION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New nutrition record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Breakfast');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Breakfast\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Nutrition record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Breakfast');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Nutrition search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Nutrition record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('NUTRITION-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Breakfast');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"NUTRITION-CC-2\",\r\n    \"Name\": \"Breakfast\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Nutrients\", \"Vitamins\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Nutrition record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"NUTRITION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New nutrition record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"   pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Breakfast');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Breakfast\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physiotherapy",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PHYSIOTHERAPY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New physiotherapy record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Joint Flexibility');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Joint Flexibility\",\r\n    \"Description\": \".....\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Physiotherapy record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Joint Flexibility');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Physiotherapy search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "recommendedDurationMin",
											"value": "20",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Physiotherapy record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('PHYSIOTHERAPY-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Joint Flexibility');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(3);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"PHYSIOTHERAPY-CC-2\",\r\n    \"Name\": \"Joint Flexibility\",\r\n    \"Description\": \".....\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Tags\": [\"Flexibility\", \"Muscle movement\", \"Post trauma recovery\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Physiotherapy record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PHYSIOTHERAPY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New physiotherapy record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('RecommendedDurationMin');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Joint Flexibility');\r",
											"    pm.expect(jsonRes.Data.RecommendedDurationMin).equals(20);\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Exercise');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Joint Flexibility\",\r\n    \"Description\": \".....\",\r\n    \"RecommendedDurationMin\": 20,\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Priority",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PRIORITY_ID\", respData.Data.id);\r",
											"    pm.environment.set(\"PRIORITY_ASSET_CODE\", respData.Data.AssetCode);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New priority record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Prioritization');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Weight management\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Priority record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Prioritization');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Priority search results are returned', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Priority record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('PRIORITY-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Prioritization');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"PRIORITY-CC-2\",\r\n    \"Name\": \"Weight management\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Priority record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PRIORITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New priority record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Prioritization');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Weight management\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reflection",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REFLECTION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New reflection record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Progress in the last week');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Personal reflection');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Progress in the last week\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REFLECTION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reflection record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Progress in the last week');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Personal reflection');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reflection record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reflection record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('REFLECTION-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Progress in the last week');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Personal reflection');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"REFLECTION-CC-2\",\r\n    \"Name\": \"Progress in the last week\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Reflection\", \"Retrospection\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reflection record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REFLECTION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New reflection record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Progress in the last week');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Personal reflection');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Progress in the last week\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reminder",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REMINDER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New reminder record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take a walk');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Take a walk\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reminder record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take a walk');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reminder record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reminder record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('REMINDER-CC-2');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take a walk');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"REMINDER-CC-2\",\r\n    \"Name\": \"Take a walk\",\r\n    \"Description\": \".....\",\r\n    \"Tags\": [\"Schedule\", \"Tasks\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Reminder record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REMINDER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New reminder record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Take a walk');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Take a walk\",\r\n    \"Description\": \".....\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Video",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"VIDEO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New video record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/video",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Video record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Video record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "transcript",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Video record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('VIDEO-AB-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Tags.length).equals(2);\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"VIDEO-AB-1\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Video record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"VIDEO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New video record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Transcript');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/video",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Web link",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_LINK_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New web link record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web link record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web link record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web link record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('WEBLINK-CC-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"WEBLINK-CC-1\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web link record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_LINK_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New web link record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Web newsfeed",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_NEWSFEED_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New web newsfeed record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web newsfeed record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web newsfeed record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "url",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web newsfeed record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('NEWSFEED-CC-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"NEWSFEED-CC-1\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Web newsfeed record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_NEWSFEED_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New web newsfeed record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Know your condition!');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Know your condition!\",\r\n    \"Description\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Word power",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WORD_POWER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New word power record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalResources');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"Nutrition is the biochemical and physiological process by which an organism uses food to support its life. It includes ingestion, absorption, assimilation, biosynthesis, catabolism and excretion.\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Word power record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalResources');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Word power record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/search?version=1.0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "word",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "additionalResources",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetCategory",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Word power record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalResources');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.AssetCode).equals('WORDPOWER-AB-1');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"WORDPOWER-AB-1\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"Nutrition is the biochemical and physiological process by which an organism uses food to support its life. It includes ingestion, absorption, assimilation, biosynthesis, catabolism and excretion.\",\r\n    \"AdditionalResources\": [\"https://en.wikipedia.org/wiki/Nutrition\", \"https://en.wikipedia.org/wiki/Micronutrient\"],\r\n    \"Tags\": [\"Maternity\", \"Neo-natal-care\"],\r\n    \"Version\": \"1.0\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Word power record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WORD_POWER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New word power record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCode');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalResources');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetCategory');\r",
											"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
											"    pm.expect(jsonRes.Data.Name).equals('Nutrition');\r",
											"    pm.expect(jsonRes.Data.AssetCategory).equals('Educational');\r",
											"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"Nutrition is the biochemical and physiological process by which an organism uses food to support its life. It includes ingestion, absorption, assimilation, biosynthesis, catabolism and excretion.\",\r\n    \"Version\": \"1.0\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Careplan category",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_CATEGORY_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New careplan category record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Type).equals(pm.environment.get(\"CAREPLAN_CATEGORY\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"CAREPLAN_CATEGORY\", 'Sports Rehab - ' + rand);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Type\": \"{{CAREPLAN_CATEGORY}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try creating with same type - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is failure', function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('failure');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Type\": \"{{CAREPLAN_CATEGORY}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan category record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Type).equals(pm.environment.get(\"CAREPLAN_CATEGORY\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan category search results are returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/search?type=sports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "sports"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan category record is updated', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Type).equals(pm.environment.get(\"CAREPLAN_CATEGORY\"));\r",
									"    pm.expect(jsonRes.Data.Description).equals('Some other category...');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"CAREPLAN_CATEGORY\", 'Sports Rehab - ' + rand);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{CAREPLAN_CATEGORY}}\",\r\n    \"Description\": \"Some other category...\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan category record is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_CATEGORY_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New careplan category record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Type).equals(pm.environment.get(\"CAREPLAN_CATEGORY\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"CAREPLAN_CATEGORY\", 'Sports Rehab - ' + rand);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Type\": \"{{CAREPLAN_CATEGORY}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Care plan",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CARE_PLAN_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New care plan record is created', function () {\r",
									"\r",
									"    var expectedCategoryId = pm.environment.get(\"CAREPLAN_CATEGORY_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Code');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CategoryId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Code).equals('REAN-Maternity-2');\r",
									"    pm.expect(jsonRes.Data.Name).equals('Maternity Care Plan for Remote Population');\r",
									"    pm.expect(jsonRes.Data.CategoryId).equals(expectedCategoryId);\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is maternity care plan specifically designed for remote areas with low resource settings.');\r",
									"    pm.expect(jsonRes.Data.Tags.length).equals(3);\r",
									"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Code\": \"REAN-Maternity-2\",\r\n    \"CategoryId\": \"{{CAREPLAN_CATEGORY_ID}}\",\r\n    \"Name\": \"Maternity Care Plan for Remote Population\",\r\n    \"Description\": \"This is maternity care plan specifically designed for remote areas with low resource settings.\",\r\n    \"Tags\": [\r\n        \"Maternity\",\r\n        \"Child-Care\",\r\n        \"Malnutrition\"\r\n    ],\r\n    \"Version\": \"1.0\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplans",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Care plan record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Code');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CategoryId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Code).equals('REAN-Maternity-2');\r",
									"    pm.expect(jsonRes.Data.Name).equals('Maternity Care Plan for Remote Population');\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is maternity care plan specifically designed for remote areas with low resource settings.');\r",
									"    pm.expect(jsonRes.Data.Tags.length).equals(3);\r",
									"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan search results are returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"search"
							],
							"query": [
								{
									"key": "code",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "categoryId",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "name",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "version",
									"value": "V1",
									"disabled": true
								},
								{
									"key": "ownerUserId",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "isActive",
									"value": "xyz",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Care plan record is updated', function () {\r",
									"    var expectedCategoryId = pm.environment.get(\"CAREPLAN_CATEGORY_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Code');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CategoryId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Code).equals('REAN-Maternity-2');\r",
									"    pm.expect(jsonRes.Data.Name).equals('Maternity Care Plan for Remote Population');\r",
									"    pm.expect(jsonRes.Data.CategoryId).equals(expectedCategoryId);\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is maternity care plan specifically designed for remote areas with low resource settings.');\r",
									"    pm.expect(jsonRes.Data.Tags.length).equals(3);\r",
									"    pm.expect(jsonRes.Data.Version).equals('V1');\r",
									"});\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Code\": \"REAN-Maternity-2\",\r\n    \"CategoryId\": \"{{CAREPLAN_CATEGORY_ID}}\",\r\n    \"Name\": \"Maternity Care Plan for Remote Population\",\r\n    \"Description\": \"This is maternity care plan specifically designed for remote areas with low resource settings.\",\r\n    \"Version\": \"V1\",\r\n    \"Tags\": [\"Maternity\", \"Child-Care\", \"Malnutrition\"]\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Careplan record is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CARE_PLAN_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New care plan record is created', function () {\r",
									"    \r",
									"    var expectedCategoryId = pm.environment.get(\"CAREPLAN_CATEGORY_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Code');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CategoryId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Version');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"  \r",
									"    pm.expect(jsonRes.Data.Code).equals('REAN-Maternity-2');\r",
									"    pm.expect(jsonRes.Data.Name).equals('Maternity Care Plan for Remote Population');\r",
									"    pm.expect(jsonRes.Data.CategoryId).equals(expectedCategoryId);\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is maternity care plan specifically designed for remote areas with low resource settings.');\r",
									"    pm.expect(jsonRes.Data.Tags.length).equals(3);\r",
									"    pm.expect(jsonRes.Data.Version).equals('1.0');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{MODERATOR_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Code\": \"REAN-Maternity-2\",\r\n    \"CategoryId\": \"{{CAREPLAN_CATEGORY_ID}}\",\r\n    \"Name\": \"Maternity Care Plan for Remote Population\",\r\n    \"Description\": \"This is maternity care plan specifically designed for remote areas with low resource settings.\",\r\n    \"Tags\": [\r\n        \"Maternity\",\r\n        \"Child-Care\",\r\n        \"Malnutrition\"\r\n    ],\r\n    \"Version\": \"1.0\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplans",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Careplan activities",
			"item": [
				{
					"name": "Create / Get / Search / Update / Delete",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New careplan activity record is created', function () {\r",
											"\r",
											"    var expectedAssetId = pm.environment.get(\"MESSAGE_ID\");\r",
											"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Message');\r",
											"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
											"    pm.expect(jsonRes.Data.Day).equals(1);\r",
											"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetId\": \"{{MESSAGE_ID}}\",\r\n    \"AssetType\": \"Message\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 1,\r\n    \"TimeSlot\": \"Morning\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Careplan activity record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Day).equals(1);\r",
											"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities/{{CAREPLAN_ACTIVITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities",
										"{{CAREPLAN_ACTIVITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Careplan schedule record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities/search?assetType=Message",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities",
										"search"
									],
									"query": [
										{
											"key": "assetId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetType",
											"value": "Message"
										},
										{
											"key": "careplanId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "day",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "timeSlot",
											"value": "xyz",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Careplan activity record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Message');\r",
											"    pm.expect(jsonRes.Data.Day).equals(15);\r",
											"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetId\": \"{{ACTION_PLAN_ID}}\",\r\n    \"AssetType\": \"Message\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 15,\r\n    \"TimeSlot\": \"Morning\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities/{{CAREPLAN_ACTIVITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities",
										"{{CAREPLAN_ACTIVITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Careplan activity record is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities/{{CAREPLAN_ACTIVITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities",
										"{{CAREPLAN_ACTIVITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New careplan activity record is created', function () {\r",
											"\r",
											"    var expectedAssetId = pm.environment.get(\"MESSAGE_ID\");\r",
											"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Message');\r",
											"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
											"    pm.expect(jsonRes.Data.Day).equals(1);\r",
											"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetId\": \"{{MESSAGE_ID}}\",\r\n    \"AssetType\": \"Message\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 1,\r\n    \"TimeSlot\": \"Morning\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registration activities",
					"item": [
						{
							"name": "Create welcome message activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New careplan activity record is created', function () {\r",
											"\r",
											"    var expectedAssetId = pm.environment.get(\"MESSAGE_ID\");\r",
											"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Message');\r",
											"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
											"    pm.expect(jsonRes.Data.IsRegistrationActivity).equals(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetId\": \"{{MESSAGE_ID}}\",\r\n    \"AssetType\": \"Message\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"IsRegistrationActivity\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create preliminary assessment activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New careplan activity record is created', function () {\r",
											"\r",
											"    var expectedAssetId = pm.environment.get(\"ASSESSMENT_ID\");\r",
											"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
											"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
											"    pm.expect(jsonRes.Data.AssetType).equals('Assessment');\r",
											"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
											"    pm.expect(jsonRes.Data.IsRegistrationActivity).equals(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetId\": \"{{ASSESSMENT_ID}}\",\r\n    \"AssetType\": \"Assessment\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"IsRegistrationActivity\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/careplan-activities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"careplan-activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scheduled activities",
					"item": [
						{
							"name": "Day 1",
							"item": [
								{
									"name": "Create animation activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"ANIMATION_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Animation');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(1);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{ANIMATION_ID}}\",\r\n    \"AssetType\": \"Animation\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 1,\r\n    \"TimeSlot\": \"Morning\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create article activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"ARTICLE_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Article');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(1);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Afternoon');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{ARTICLE_ID}}\",\r\n    \"AssetType\": \"Article\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 1,\r\n    \"TimeSlot\": \"Afternoon\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create appointment activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"APPOINTMENT_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Appointment');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(1);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Evening');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{APPOINTMENT_ID}}\",\r\n    \"AssetType\": \"Appointment\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 1,\r\n    \"TimeSlot\": \"Evening\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Day 2",
							"item": [
								{
									"name": "Create video activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"VIDEO_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Video');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(2);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Morning');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{VIDEO_ID}}\",\r\n    \"AssetType\": \"Video\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 2,\r\n    \"TimeSlot\": \"Morning\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create medication activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"MEDICATION_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Medication');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(2);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Afternoon');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{MEDICATION_ID}}\",\r\n    \"AssetType\": \"Medication\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 2,\r\n    \"TimeSlot\": \"Afternoon\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create nutrition activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var respData = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ACTIVITY_ID\", respData.Data.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test('Request is successfull', function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test('New careplan activity record is created', function () {\r",
													"\r",
													"    var expectedAssetId = pm.environment.get(\"NUTRITION_ID\");\r",
													"    var expectedCareplanId = pm.environment.get(\"CARE_PLAN_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
													"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
													"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.AssetId).equals(expectedAssetId);\r",
													"    pm.expect(jsonRes.Data.AssetType).equals('Nutrition');\r",
													"    pm.expect(jsonRes.Data.CareplanId).equals(expectedCareplanId);\r",
													"    pm.expect(jsonRes.Data.Day).equals(2);\r",
													"    pm.expect(jsonRes.Data.TimeSlot).equals('Evening');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{MODERATOR_JWT}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssetId\": \"{{NUTRITION_ID}}\",\r\n    \"AssetType\": \"Nutrition\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"Day\": 2,\r\n    \"TimeSlot\": \"Evening\",\r\n    \"IsRegistrationActivity\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/careplan-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"careplan-activities"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Enrollment",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New enrollment record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = (new Date()).toISOString().split('T')[0];\r",
									"pm.environment.set(\"TODAY\", today);\r",
									"\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"function formatDate(date) {\r",
									"    var d = new Date(date),\r",
									"        month = '' + (d.getMonth() + 1),\r",
									"        day = '' + d.getDate(),\r",
									"        year = d.getFullYear();\r",
									"\r",
									"    if (month.length < 2) \r",
									"        month = '0' + month;\r",
									"    if (day.length < 2) \r",
									"        day = '0' + day;\r",
									"\r",
									"    return [year, month, day].join('-');\r",
									"}\r",
									"\r",
									"var toDate = formatDate((new Date()).addDays(365));\r",
									"\r",
									"pm.environment.set(\"TO_DATE\", toDate);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TO_DATE}}\",\r\n    \"EnrollmentDate\": \"{{TODAY}}\",\r\n    \"DayOffset\": 0,\r\n    \"WeekOffset\": 0\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/search?careplanId={{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"search"
							],
							"query": [
								{
									"key": "careplanId",
									"value": "{{CARE_PLAN_ID}}"
								},
								{
									"key": "progressStatus",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2022-06-29",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - Do not use for now",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment record is updated', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n   \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n   \"StartDate\": \"2022-06-29\",\r\n   \"EndDate\": \"2022-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment record is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New enrollment record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TO_DATE}}\",\r\n    \"EnrollmentDate\": \"{{TODAY}}\",\r\n    \"DayOffset\": 0,\r\n    \"WeekOffset\": 0\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollment tasks",
			"item": [
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var tasks = jsonRes.Data.Items;\r",
									"    for (var i = 0; i < tasks.length; i++) {\r",
									"        var task = tasks[i];\r",
									"        pm.environment.set(\"ENROLLMENT_TASK_ID_\" + (i+1).toString(), task.id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment schedule record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollment-tasks/search?careplanId={{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-tasks",
								"search"
							],
							"query": [
								{
									"key": "assetId",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "assetType",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "careplanId",
									"value": "{{CARE_PLAN_ID}}"
								},
								{
									"key": "timeSlot",
									"value": "xyz",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Enrollment schedule record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanActivityId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TimeSlot');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ScheduledDate');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollment-tasks/{{ENROLLMENT_TASK_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-tasks",
								"{{ENROLLMENT_TASK_ID_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Participant activity response",
			"item": [
				{
					"name": "Create response as json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New participant activity response record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": {\r\n        \"Blood Glucose\": \"116 mg/dL\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New participant activity response record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": {\r\n        \"Blood Glucose\": \"116 mg/dL\",\r\n        \"Body weight\": \"72 Kg\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create response as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New participant activity response record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": \"Yes\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create response as numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New participant activity response record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": 2\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by ActivityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(' User activity response is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"     pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses/{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses",
								"{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(' User activity response is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses/search?participantId={{PARTICIPANT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses",
								"search"
							],
							"query": [
								{
									"key": "careplanId",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "assetId",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "assetType",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "response",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "timeResponded",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "progressStatus",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "participantId",
									"value": "{{PARTICIPANT_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(' User activity response is updated', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"     pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": \"{Answer: 99 F}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses/{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses",
								"{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('User activity response is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses/{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses",
								"{{PARTICIPANT_ACTIVITY_RESPONSE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New participant activity response record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnrollmentTaskId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Response');\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"EnrollmentTaskId\": \"{{ENROLLMENT_TASK_ID_1}}\",\r\n    \"Response\": \"{Answer : 120 mg/dL}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participant-activity-responses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participant-activity-responses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Setting Priority/Goal/Action Plan",
			"item": [
				{
					"name": "Participant selected priority",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_PRIORITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New selected priority record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var today = (new Date()).toISOString().split('T')[0];\r",
											"pm.environment.set(\"TODAY\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Weight management\",\r\n    \"Description\": \".....\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"AssetId\": \"{{PRIORITY_ID}}\",\r\n    \"AssetType\": \"Priority\",\r\n    \"AssetCode\": \"{{PRIORITY_ASSET_CODE}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"StartDate\": \"{{TODAY}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('User selected priority record is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"  \r",
											"    pm.expect(jsonRes.Data.Name).equals('Weight management');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities/{{SELECTED_PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities",
										"{{SELECTED_PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(' Participant selected priority! is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities/search?name=Weight management",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities",
										"search"
									],
									"query": [
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "careplanId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetType",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Weight management"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Participant selected priority record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"     pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"  \r",
											"    pm.expect(jsonRes.Data.Name).equals('Stress management');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Stress management\",\r\n    \"Description\": \"Sleep at least 6 hours a day\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"AssetId\": \"{{PRIORITY_ID}}\",\r\n    \"AssetType\": \"Priority\",\r\n    \"AssetCode\": \"{{PRIORITY_ASSET_CODE}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"StartDate\": \"{{TODAY}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities/{{SELECTED_PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities",
										"{{SELECTED_PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Participant selected priority is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities/{{SELECTED_PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities",
										"{{SELECTED_PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_PRIORITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New participant selected priority record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"  \r",
											"    pm.expect(jsonRes.Data.Name).equals('Stress management');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Stress management\",\r\n    \"Description\": \".....\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"AssetId\": \"{{PRIORITY_ID}}\",\r\n    \"AssetType\": \"Priority\",\r\n    \"AssetCode\": \"{{PRIORITY_ASSET_CODE}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"StartDate\": \"{{TODAY}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-priorities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Participant selected goal",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('New selected goal record is created', function () {\r",
											"\r",
											"    var participantId = pm.environment.get(\"PARTICIPANT_ID\");\r",
											"    var selectedPriorityId = pm.environment.get(\"SELECTED_PRIORITY_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.ParticipantId).equals(participantId);\r",
											"    pm.expect(jsonRes.Data.SelectedPriorityId).equals(selectedPriorityId);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var today = (new Date()).toISOString().split('T')[0];\r",
											"pm.environment.set(\"TODAY\", today);\r",
											"today = new Date();\r",
											"var tomorrow = new Date();\r",
											"// Add 30 Day\r",
											"tomorrow.setDate(today.getDate() + 30);\r",
											"pm.environment.set(\"TODAY_+_30days\", tomorrow);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Blood Glucose\",\r\n    \"Description\": \".....\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedPriorityId\": \"{{SELECTED_PRIORITY_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{GOAL_ID}}\",\r\n    \"AssetType\": \"Goal\",\r\n    \"AssetCode\": \"{{GOAL_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_30days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New selected goal record is created', function () {\r",
											"\r",
											"    var participantId = pm.environment.get(\"PARTICIPANT_ID\");\r",
											"    var selectedPriorityId = pm.environment.get(\"SELECTED_PRIORITY_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.ParticipantId).equals(participantId);\r",
											"    pm.expect(jsonRes.Data.SelectedPriorityId).equals(selectedPriorityId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals/{{SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals",
										"{{SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(' Selected goals are retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals/search?careplanId={{CARE_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "careplanId",
											"value": "{{CARE_PLAN_ID}}"
										},
										{
											"key": "assetId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetType",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "additionalDetails",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "progressStatus",
											"value": "xyz",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New selected goal record is created', function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    var participantId = pm.environment.get(\"PARTICIPANT_ID\");\r",
											"    var description = jsonRes.Data.Description;\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.ParticipantId).equals(participantId);\r",
											"    pm.expect(jsonRes.Data.Description).equals(description);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Blood Glucose\",\r\n    \"Description\": \"Control your sugar intake\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedPriorityId\": \"{{SELECTED_PRIORITY_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{GOAL_ID}}\",\r\n    \"AssetType\": \"Goal\",\r\n    \"AssetCode\": \"{{GOAL_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_30days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals/{{SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals",
										"{{SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('User selected goal is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals/{{SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals",
										"{{SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('New selected goal record is created', function () {\r",
											"\r",
											"    var participantId = pm.environment.get(\"PARTICIPANT_ID\");\r",
											"    var selectedPriorityId = pm.environment.get(\"SELECTED_PRIORITY_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Blood Pressure');\r",
											"    pm.expect(jsonRes.Data.ParticipantId).equals(participantId);\r",
											"    pm.expect(jsonRes.Data.SelectedPriorityId).equals(selectedPriorityId);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Blood Pressure\",\r\n    \"Description\": \".....\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedPriorityId\": \"{{SELECTED_PRIORITY_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{GOAL_ID}}\",\r\n    \"AssetType\": \"Goal\",\r\n    \"AssetCode\": \"{{GOAL_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_30days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-goals"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Participant selected action plan",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('New selected action plan record is created', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"     pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var today = (new Date()).toISOString().split('T')[0];\r",
											"pm.environment.set(\"TODAY\", today);\r",
											"today = new Date();\r",
											"var tomorrow = new Date();\r",
											"// Add 5 Day\r",
											"tomorrow.setDate(today.getDate() + 5);\r",
											"pm.environment.set(\"TODAY_+_5days\", tomorrow);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \".....\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedGoalId\": \"{{SELECTED_GOAL_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{ACTION_PLAN_ID}}\",\r\n    \"AssetType\": \"Action plan\",\r\n    \"AssetCode\": \"{{ACTION_PLAN_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_5days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Participant selected action plan is retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"      pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans/{{SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans",
										"{{SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(' Selected action plans are retrived', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans/search?careplanId={{CARE_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "description",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "careplanId",
											"value": "{{CARE_PLAN_ID}}"
										},
										{
											"key": "assetId",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "assetType",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "additionalDetails",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "progressStatus",
											"value": "xyz",
											"disabled": true
										},
										{
											"key": "participantId",
											"value": "{{PARTICIPANT_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Selected action plan record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var description = jsonRes.Data.Description;\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.Description).equals(description);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \"We need to follow low carb and high protien diet\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedGoalId\": \"{{SELECTED_GOAL_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{ACTION_PLAN_ID}}\",\r\n    \"AssetType\": \"Action plan\",\r\n    \"AssetCode\": \"{{ACTION_PLAN_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_5days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans/{{SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans",
										"{{SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Selected action plan is deleted', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans/{{SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans",
										"{{SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"SELECTED_ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test('Selected action plan record is updated', function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var description = jsonRes.Data.Description;\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ParticipantId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('CareplanId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetId');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssetType');\r",
											"    pm.expect(jsonRes.Data).to.have.property('AdditionalDetails');\r",
											"    pm.expect(jsonRes.Data).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('EndDate');\r",
											"    pm.expect(jsonRes.Data).to.have.property('ProgressStatus');\r",
											"   \r",
											"    pm.expect(jsonRes.Data.Name).equals('Reduce Fasting Blood Glucose');\r",
											"    pm.expect(jsonRes.Data.Description).equals(description);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Reduce Fasting Blood Glucose\",\r\n    \"Description\": \"Eat less carbs\",\r\n    \"EnrollmentId\": \"{{ENROLLMENT_ID}}\",\r\n    \"ParticipantId\": \"{{PARTICIPANT_ID}}\",\r\n    \"SelectedGoalId\": \"{{SELECTED_GOAL_ID}}\",\r\n    \"CareplanId\": \"{{CARE_PLAN_ID}}\",\r\n    \"AssetId\": \"{{ACTION_PLAN_ID}}\",\r\n    \"AssetType\": \"Action plan\",\r\n    \"AssetCode\": \"{{ACTION_PLAN_ASSET_CODE}}\",\r\n    \"AdditionalDetails\": \"...\",\r\n    \"StartDate\": \"{{TODAY}}\",\r\n    \"EndDate\": \"{{TODAY_+_5days}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participant-selected-action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participant-selected-action-plans"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}