{
	"info": {
		"_postman_id": "4a2978a1-594c-4f4a-af37-fbe5583ba546",
		"name": "careplan.service.workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5510218"
	},
	"item": [
		{
			"name": "service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						},
						"description": "This request will be used by API monitor to check the health of the service."
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "Admin login",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Moderator login",
			"item": [
				{
					"name": "Moderator logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"MODERATOR_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"moderator\",\r\n    \"Password\": \"{{MODERATOR_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "User management",
			"item": []
		},
		{
			"name": "Api client",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", respData.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"var password = \"Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client records are returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"search"
							],
							"query": [
								{
									"key": "clientName",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "clientCode",
									"value": "MYCLIENT",
									"disabled": true
								},
								{
									"key": "clientInterfaceType",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "isPrivileged",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "countryCode",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "email",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validFrom",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validTill",
									"value": "xyz",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"ClientName\": \"Rean Patient App\",\r\n\"ClientCode\": \"REANPAT\",\r\n\"ClientInterfaceType\": \"Mobile App\",\r\n\"IsPrivileged\": true,\r\n\"CountryCode\": \"+91\",\r\n\"Phone\": \"123456666\",\r\n\"Email\": \"abc@xyz.com\",\r\n\"Password\": \"abc#123XYZ\",\r\n\"ApiKey\": \"004V41E-6JX4ZYM-MAKN1N6-DAY4V6K\",\r\n\"ValidFrom\": \"2022-01-01\",\r\n\"ValidTill\": \"2023-01-01\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client deleted successfully!\", function () {\r",
									"\r",
									"    var expectedValue = true;\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API client again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", respData.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ADMIN_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			]
		},
		{
			"name": "Asset management",
			"item": [
				{
					"name": "Action plan",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New action plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ACTIONPLAN-HF-1\",\r\n    \"Name\": \"Join the gym\",\r\n    \"Description\": \"Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.\",\r\n    \"Version\": \"V1\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New action plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"ACTIONPLAN-HF-1\",\r\n\"Name\": \"Join the gym\",\r\n\"Description\": \"Studies confirm that working out with a partner significantly increases time spent exercising. A study by the Society of Behavioral Medicine showed that working with a partner, especially in a team format, improved performance, doubling the workout time of those who exercised alone.\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/action-plans/{{ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"action-plans",
										"{{ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Animation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ANIMATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New animation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AssetCode\": \"ANIMATION-MT-3\",\r\n    \"Name\": \"Know your condition!\",\r\n    \"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n    \"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n    \"Version\": \"V1\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/animations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/search?assetCode=xyz&name=xyz&transcript=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "transcript",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ANIMATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New animation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"ANIMATION-MT-3\",\r\n\"Name\": \"Know your condition!\",\r\n\"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/animations/{{ANIMATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"animations",
										"{{ANIMATION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"APPOINTMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New appointment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{MODERATOR_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"APPOINTMENT-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"AppointmentType\": \"Doctor\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/search?assetCode=xyz&name=xyz&description=xyz&appointmentType=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "appointmentType",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"APPOINTMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New appointment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"APPOINTMENT-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"AppointmentType\": \"Doctor\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/appointments/{{APPOINTMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"appointments",
										"{{APPOINTMENT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Article",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ARTICLE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New article record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"ARTICLE-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Summary\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/articles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/search?assetCode=xyz&name=xyz&summary=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "summary",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ARTICLE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New article record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"ARTICLE-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Summary\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/articles/{{ARTICLE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"articles",
										"{{ARTICLE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Assessment",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ASSESSMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New assessment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"ASSESSMENT-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"Template\": \"{}\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&template=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "template",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"ASSESSMENT_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New assessment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"ASSESSMENT-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"Template\": \"{}\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/assessments/{{ASSESSMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"assessments",
										"{{ASSESSMENT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Audio",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New audio record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"AUDIO-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/audio",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/search?assetCode=xyz&name=xyz&transcript=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "transcript",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"AUDIO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New audio record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"AUDIO-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/audio/{{AUDIO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"audio",
										"{{AUDIO_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Biometrics",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"BIOMETRICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New biometrics record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"BIOMETRICS-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"BiometricsType\": \"Blood pressure\",\r\n\"MeasurementUnit\": \"mmHg\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&biometricsType=xyz&measurementUnit=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "biometricsType",
											"value": "xyz"
										},
										{
											"key": "measurementUnit",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"BIOMETRICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New biometrics record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"BIOMETRICS-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"BiometricsType\": \"Blood pressure\",\r\n\"MeasurementUnit\": \"mmHg\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/biometrics/{{BIOMETRICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"biometrics",
										"{{BIOMETRICS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Nutrition",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"NUTRITION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New nutrition record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"NUTRITION-CC-2\",\r\n\"Name\": \"Breakfast\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"NUTRITION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New nutrition record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"NUTRITION-CC-2\",\r\n\"Name\": \"Breakfast\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Nutrients', 'Vitamins'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/nutritions/{{NUTRITION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"nutritions",
										"{{NUTRITION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physiotherapy",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PHYSIOTHERAPY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New physiotherapy record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"PHYSIOTHERAPY-CC-2\",\r\n\"Name\": \"Joint Flexibility\",\r\n\"Description\": \".....\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/search?assetCode=xyz&name=xyz&description=xyz&recommendedDurationMin=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "recommendedDurationMin",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PHYSIOTHERAPY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New physiotherapy record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"PHYSIOTHERAPY-CC-2\",\r\n\"Name\": \"Joint Flexibility\",\r\n\"Description\": \".....\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Tags\": ['Flexibility', 'Muscle movement', 'Post trauma recovery'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/physiotherapy/{{PHYSIOTHERAPY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"physiotherapy",
										"{{PHYSIOTHERAPY_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Priority",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PRIORITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New priority record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"PRIORITY-CC-2\",\r\n\"Name\": \"Weight management\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"PRIORITY_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New priority record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"PRIORITY-CC-2\",\r\n\"Name\": \"Weight management\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/priorities/{{PRIORITY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"priorities",
										"{{PRIORITY_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reflection",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REFLECTION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New reflection record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"REFLECTION-CC-2\",\r\n\"Name\": \"Progress in the last week\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REFLECTION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New reflection record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"REFLECTION-CC-2\",\r\n\"Name\": \"Progress in the last week\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Reflection', 'Retrospection'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reflections/{{REFLECTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reflections",
										"{{REFLECTION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reminder",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REMINDER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New reminder record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"REMINDER-CC-2\",\r\n\"Name\": \"Take a walk\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"REMINDER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New reminder record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"REMINDER-CC-2\",\r\n\"Name\": \"Take a walk\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Schedule', 'Tasks'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/reminders/{{REMINDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"reminders",
										"{{REMINDER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Video",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"VIDEO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New video record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"VIDEO-AB-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/video",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/search?assetCode=xyz&name=xyz&transcript=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "transcript",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"VIDEO_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New video record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"VIDEO-AB-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Transcript\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/video/{{VIDEO_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"video",
										"{{VIDEO_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Web link",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_LINK_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New web link record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"WEBLINK-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/search?assetCode=xyz&name=xyz&description=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_LINK_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New web link record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"WEBLINK-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-links/{{WEB_LINK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-links",
										"{{WEB_LINK_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Web newsfeed",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_NEWSFEED_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New web newsfeed record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"NEWSFEED-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/search?assetCode=xyz&name=xyz&description=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WEB_NEWSFEED_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New web newsfeed record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"NEWSFEED-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/web-newsfeeds/{{WEB_NEWSFEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"web-newsfeeds",
										"{{WEB_NEWSFEED_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Word power",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WORD_POWER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New word power record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"WORDPOWER-AB-1\",\r\n\"Word\": \"Nutrition\",\r\n\"Description\": \"Nutrition is the biochemical and physiological process by which an organism uses food to support its life. It includes ingestion, absorption, assimilation, biosynthesis, catabolism and excretion.\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/search?assetCode=xyz&word=xyz&description=xyz&additionalResources=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "word",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "additionalResources",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"WORD_POWER_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New word power record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"WORDPOWER-AB-1\",\r\n\"Word\": \"Nutrition\",\r\n\"Description\": \"Nutrition is the biochemical and physiological process by which an organism uses food to support its life. It includes ingestion, absorption, assimilation, biosynthesis, catabolism and excretion.\",\r\n\"AdditionalResources\": ['https://en.wikipedia.org/wiki/Nutrition', 'https://en.wikipedia.org/wiki/Micronutrient'],\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/word-power/{{WORD_POWER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"word-power",
										"{{WORD_POWER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Challenge",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHALLENGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New challenge record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"CHALLENGE-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHALLENGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New challenge record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"CHALLENGE-HF-12\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Checkup",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHECKUP_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New checkup record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"CHECKUP-HF-12\",\r\n\"Name\": \"Chest X-ray\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CHECKUP_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New checkup record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"CHECKUP-HF-12\",\r\n\"Name\": \"Chest X-ray\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/checkups/{{CHECKUP_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"checkups",
										"{{CHECKUP_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consultation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CONSULTATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New consultation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"CONSULTATION-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"ConsultationType\": \"Tele-consultation\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/search?assetCode=xyz&name=xyz&description=xyz&consultationType=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "consultationType",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"CONSULTATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New consultation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"CONSULTATION-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"ConsultationType\": \"Tele-consultation\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/consultations/{{CONSULTATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"consultations",
										"{{CONSULTATION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exercise",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"EXERCISE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New exercise record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"EXERCISE-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"ExerciseType\": \"Aerobic\",\r\n\"IntensityLevel\": \"Moderate\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/search?assetCode=xyz&name=xyz&description=xyz&exerciseType=xyz&intensityLevel=xyz&recommendedDurationMin=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "exerciseType",
											"value": "xyz"
										},
										{
											"key": "intensityLevel",
											"value": "xyz"
										},
										{
											"key": "recommendedDurationMin",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"EXERCISE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New exercise record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"EXERCISE-CC-2\",\r\n\"Name\": \"Nutrition\",\r\n\"Description\": \".....\",\r\n\"ExerciseType\": \"Aerobic\",\r\n\"IntensityLevel\": \"Moderate\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/exercises/{{EXERCISE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"exercises",
										"{{EXERCISE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Goal",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New goal record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"GOAL-CC-2\",\r\n\"Name\": \"Reduce Fasting Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New goal record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"GOAL-CC-2\",\r\n\"Name\": \"Reduce Fasting Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"goals",
										"{{GOAL_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Infographics",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"INFOGRAPHICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New infographics record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"INFOGRAPHICS-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/search?assetCode=xyz&name=xyz&description=xyz&url=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "url",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"INFOGRAPHICS_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New infographics record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"INFOGRAPHICS-CC-1\",\r\n\"Name\": \"Know your condition!\",\r\n\"Description\": \"Studies confirm that working out with a partner ...\",\r\n\"Url\": \"http://watchlearnlive.heart.org/CVML_Player.php?moduleSelect=hrtflr\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/infographics/{{INFOGRAPHICS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"infographics",
										"{{INFOGRAPHICS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Medication",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDICATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New medication record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"MEDICATION-CC-2\",\r\n\"Name\": \"Take your medication\",\r\n\"Description\": \".....\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/medications",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/search?assetCode=xyz&name=xyz&description=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDICATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New medication record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"MEDICATION-CC-2\",\r\n\"Name\": \"Take your medication\",\r\n\"Description\": \".....\",\r\n\"Tags\": ['Medication adherence'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/medications/{{MEDICATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"medications",
										"{{MEDICATION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Meditation",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDITATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New meditation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"MEDITATION-CC-2\",\r\n\"Name\": \"Mindfulness meditation\",\r\n\"Description\": \".....\",\r\n\"MeditationType\": \"Mindfulness\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/search?assetCode=xyz&name=xyz&description=xyz&meditationType=xyz&recommendedDurationMin=xyz&assetCategory=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "meditationType",
											"value": "xyz"
										},
										{
											"key": "recommendedDurationMin",
											"value": "xyz"
										},
										{
											"key": "assetCategory",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MEDITATION_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New meditation record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"MEDITATION-CC-2\",\r\n\"Name\": \"Mindfulness meditation\",\r\n\"Description\": \".....\",\r\n\"MeditationType\": \"Mindfulness\",\r\n\"RecommendedDurationMin\": 20,\r\n\"Tags\": ['Peaceful mind', 'Bliss'],\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/meditations/{{MEDITATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"meditations",
										"{{MEDITATION_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Message",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MESSAGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New message record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"AssetCode\": \"MESSAGE-CC-1\",\r\n\"Name\": \"Scheduling at the start of the day makes execution simpler!\",\r\n\"Description\": \"1) Write out your plan every day. 2) Plan at the same time every day. 3) Brainstorm a quick to-do list. 4) Divide your task list between Work and Life. ...\",\r\n\"MessageType\": \"Educational\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/messages",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/search?assetCode=xyz&name=xyz&description=xyz&category=xyz&messageType=xyz&tags=xyz&version=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"search"
									],
									"query": [
										{
											"key": "assetCode",
											"value": "xyz"
										},
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "category",
											"value": "xyz"
										},
										{
											"key": "messageType",
											"value": "xyz"
										},
										{
											"key": "tags",
											"value": "xyz"
										},
										{
											"key": "version",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"MESSAGE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New message record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AssetCode\": \"MESSAGE-CC-1\",\r\n\"Name\": \"Scheduling at the start of the day makes execution simpler!\",\r\n\"Description\": \"1) Write out your plan every day. 2) Plan at the same time every day. 3) Brainstorm a quick to-do list. 4) Divide your task list between Work and Life. ...\",\r\n\"MessageType\": \"Educational\",\r\n\"Tags\": ['Maternity', 'Neo-natal-care'],\r\n\"Url\": \"https://www.appname.com/\",\r\n\"Version\": \"V1\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/assets/messages/{{MESSAGE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"assets",
										"messages",
										"{{MESSAGE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Careplan category",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_CATEGORY_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New careplan category record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Type\": \"Upcoming class reminder\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/search?type=xyz&description=xyz",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "xyz"
								},
								{
									"key": "description",
									"value": "xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_CATEGORY_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New careplan category record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Type\": \"Upcoming class reminder\",\r\n\"Description\": \"Notification type description\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-categories/{{CAREPLAN_CATEGORY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-categories",
								"{{CAREPLAN_CATEGORY_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Care plan",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CARE_PLAN_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New care plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Code\": \"REAN-Maternity-2\",\r\n\"CategoryId\": \"{{CATEGORY_ID}}\",\r\n\"Name\": \"Maternity Care Plan for Remote Population\",\r\n\"Description\": \"This is maternity care plan specifically designed for remote areas with low resource settings.\",\r\n\"Version\": \"1.0.0\",\r\n\"OwnerUserId\": \"{{OWNER_USER_ID}}\",\r\n\"Tags\": [Maternity, Child-Care, Malnutrition]\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplans",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/search?code=xyz&categoryId=xyz&name=xyz&version=xyz&ownerUserId=xyz&tags=xyz&isActive=xyz",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"search"
							],
							"query": [
								{
									"key": "code",
									"value": "xyz"
								},
								{
									"key": "categoryId",
									"value": "xyz"
								},
								{
									"key": "name",
									"value": "xyz"
								},
								{
									"key": "version",
									"value": "xyz"
								},
								{
									"key": "ownerUserId",
									"value": "xyz"
								},
								{
									"key": "tags",
									"value": "xyz"
								},
								{
									"key": "isActive",
									"value": "xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CARE_PLAN_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New care plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Code\": \"REAN-Maternity-2\",\r\n\"CategoryId\": \"{{CATEGORY_ID}}\",\r\n\"Name\": \"Maternity Care Plan for Remote Population\",\r\n\"Description\": \"This is maternity care plan specifically designed for remote areas with low resource settings.\",\r\n\"Version\": \"1.0.0\",\r\n\"OwnerUserId\": \"{{OWNER_USER_ID}}\",\r\n\"Tags\": [Maternity, Child-Care, Malnutrition]\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplans/{{CARE_PLAN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplans",
								"{{CARE_PLAN_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Careplan schedule",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_SCHEDULE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New careplan schedule record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"AssetId\": \"{{ASSET_ID}}\",\r\n\"AssetType\": \"Message\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"Day\": 15,\r\n\"TimeSlot\": \"Morning\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-schedules",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-schedules/{{CAREPLAN_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-schedules",
								"{{CAREPLAN_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-schedules/search?assetId=xyz&assetType=xyz&careplanId=xyz&day=xyz&timeSlot=xyz",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-schedules",
								"search"
							],
							"query": [
								{
									"key": "assetId",
									"value": "xyz"
								},
								{
									"key": "assetType",
									"value": "xyz"
								},
								{
									"key": "careplanId",
									"value": "xyz"
								},
								{
									"key": "day",
									"value": "xyz"
								},
								{
									"key": "timeSlot",
									"value": "xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"CAREPLAN_SCHEDULE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New careplan schedule record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"AssetId\": \"{{ASSET_ID}}\",\r\n\"AssetType\": \"Message\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"Day\": 15,\r\n\"TimeSlot\": \"Morning\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/careplan-schedules/{{CAREPLAN_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-schedules",
								"{{CAREPLAN_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/careplan-schedules/{{CAREPLAN_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"careplan-schedules",
								"{{CAREPLAN_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollment",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New enrollment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"UserId\": \"{{USER_ID}}\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/search?careplanId=xyz&progressStatus=xyz",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"search"
							],
							"query": [
								{
									"key": "careplanId",
									"value": "xyz"
								},
								{
									"key": "progressStatus",
									"value": "xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New enrollment record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"StartDate\": \"\",\r\n\"EndDate\": \"\",\r\n\"EnrollmentDate\": \"\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollments/{{ENROLLMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollments",
								"{{ENROLLMENT_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollment schedule",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_SCHEDULE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New enrollment schedule record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"AssetType\": \"Message\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollment-schedules",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollment-schedules/{{ENROLLMENT_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-schedules",
								"{{ENROLLMENT_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollment-schedules/search?assetId=xyz&assetType=xyz&careplanId=xyz&timeSlot=xyz",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-schedules",
								"search"
							],
							"query": [
								{
									"key": "assetId",
									"value": "xyz"
								},
								{
									"key": "assetType",
									"value": "xyz"
								},
								{
									"key": "careplanId",
									"value": "xyz"
								},
								{
									"key": "timeSlot",
									"value": "xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"ENROLLMENT_SCHEDULE_ID\", respData.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
									"\r",
									"pm.test('New enrollment schedule record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
									"\r"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"AssetType\": \"Message\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/enrollment-schedules/{{ENROLLMENT_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-schedules",
								"{{ENROLLMENT_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/enrollment-schedules/{{ENROLLMENT_SCHEDULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"enrollment-schedules",
								"{{ENROLLMENT_SCHEDULE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User responses",
			"item": [
				{
					"name": "User activity response",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user activity response record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"UserId\": \"{{USER_ID}}\",\r\n\"EnrollmentScheduleId\": \"{{ENROLLMENT_SCHEDULE_ID}}\",\r\n\"Response\": \"{}\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-activity-responses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-activity-responses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-activity-responses/{{USER_ACTIVITY_RESPONSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-activity-responses",
										"{{USER_ACTIVITY_RESPONSE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-activity-responses/search?careplanId=xyz&assetId=xyz&assetType=xyz&response=xyz&timeResponded=xyz&progressStatus=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-activity-responses",
										"search"
									],
									"query": [
										{
											"key": "careplanId",
											"value": "xyz"
										},
										{
											"key": "assetId",
											"value": "xyz"
										},
										{
											"key": "assetType",
											"value": "xyz"
										},
										{
											"key": "response",
											"value": "xyz"
										},
										{
											"key": "timeResponded",
											"value": "xyz"
										},
										{
											"key": "progressStatus",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_ACTIVITY_RESPONSE_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user activity response record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"EnrollmentScheduleId\": \"{{ENROLLMENT_SCHEDULE_ID}}\",\r\n\"Response\": \"{}\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-activity-responses/{{USER_ACTIVITY_RESPONSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-activity-responses",
										"{{USER_ACTIVITY_RESPONSE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-activity-responses/{{USER_ACTIVITY_RESPONSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-activity-responses",
										"{{USER_ACTIVITY_RESPONSE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User selected action plan",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected action plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"Name\": \"Reduce Fasting Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"AdditionalDetails\": \"...\",\r\n\"StartDate\": \"2022-01-01\",\r\n\"EndDate\": \"2023-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-action-plans",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-action-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-action-plans/{{USER_SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-action-plans",
										"{{USER_SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-action-plans/search?name=xyz&description=xyz&careplanId=xyz&assetId=xyz&assetType=xyz&additionalDetails=xyz&startDate=xyz&endDate=xyz&progressStatus=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-action-plans",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "careplanId",
											"value": "xyz"
										},
										{
											"key": "assetId",
											"value": "xyz"
										},
										{
											"key": "assetType",
											"value": "xyz"
										},
										{
											"key": "additionalDetails",
											"value": "xyz"
										},
										{
											"key": "startDate",
											"value": "xyz"
										},
										{
											"key": "endDate",
											"value": "xyz"
										},
										{
											"key": "progressStatus",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_ACTION_PLAN_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected action plan record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"Name\": \"Reduce Fasting Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"AdditionalDetails\": \"...\",\r\n\"StartDate\": \"2022-01-01\",\r\n\"EndDate\": \"2023-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-action-plans/{{USER_SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-action-plans",
										"{{USER_SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-action-plans/{{USER_SELECTED_ACTION_PLAN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-action-plans",
										"{{USER_SELECTED_ACTION_PLAN_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User selected goal",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected goal record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"Name\": \"Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"AdditionalDetails\": \"...\",\r\n\"StartDate\": \"2022-01-01\",\r\n\"EndDate\": \"2023-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-goals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-goals/{{USER_SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-goals",
										"{{USER_SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-goals/search?name=xyz&description=xyz&careplanId=xyz&assetId=xyz&assetType=xyz&additionalDetails=xyz&startDate=xyz&endDate=xyz&progressStatus=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-goals",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "careplanId",
											"value": "xyz"
										},
										{
											"key": "assetId",
											"value": "xyz"
										},
										{
											"key": "assetType",
											"value": "xyz"
										},
										{
											"key": "additionalDetails",
											"value": "xyz"
										},
										{
											"key": "startDate",
											"value": "xyz"
										},
										{
											"key": "endDate",
											"value": "xyz"
										},
										{
											"key": "progressStatus",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_GOAL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected goal record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"Name\": \"Blood Glucose\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"AdditionalDetails\": \"...\",\r\n\"StartDate\": \"2022-01-01\",\r\n\"EndDate\": \"2023-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-goals/{{USER_SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-goals",
										"{{USER_SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-goals/{{USER_SELECTED_GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-goals",
										"{{USER_SELECTED_GOAL_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User selected priorityl",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_PRIORITYL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected priorityl record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"Name\": \"Stress management\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"StartDate\": \"2022-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-priorities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-priorities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-priorities/{{USER_SELECTED_PRIORITYL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-priorities",
										"{{USER_SELECTED_PRIORITYL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with filters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-priorities/search?name=xyz&description=xyz&careplanId=xyz&assetId=xyz&assetType=xyz&startDate=xyz",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-priorities",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "xyz"
										},
										{
											"key": "description",
											"value": "xyz"
										},
										{
											"key": "careplanId",
											"value": "xyz"
										},
										{
											"key": "assetId",
											"value": "xyz"
										},
										{
											"key": "assetType",
											"value": "xyz"
										},
										{
											"key": "startDate",
											"value": "xyz"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"try {\r",
											"    var respData = pm.response.json();\r",
											"    pm.environment.set(\"USER_SELECTED_PRIORITYL_ID\", respData.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test('Request is successfull', function () {\r    pm.response.to.have.status(200);\r    var jsonRes = pm.response.json();\r    pm.expect(jsonRes.Status).to.eql('success');\r});\r",
											"\r",
											"pm.test('New user selected priorityl record is created', function () {\r    var jsonRes = pm.response.json();\r    //pm.expect(jsonRes.Data).to.have.property('xyz');\r    //let expectedXyz = ;\r    //pm.expect(jsonRes.Data.xyz).equals(expectedXyz);\r});\r",
											"\r"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"Name\": \"Stress management\",\r\n\"Description\": \".....\",\r\n\"UserId\": \"{{USER_ID}}\",\r\n\"CareplanId\": \"{{CAREPLAN_ID}}\",\r\n\"StartDate\": \"2022-01-01\"\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-selected-priorities/{{USER_SELECTED_PRIORITYL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-priorities",
										"{{USER_SELECTED_PRIORITYL_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{USER_JWT}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-selected-priorities/{{USER_SELECTED_PRIORITYL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-selected-priorities",
										"{{USER_SELECTED_PRIORITYL_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}